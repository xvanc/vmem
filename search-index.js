var searchIndex = JSON.parse('{\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":"O","n":["bitflags"],"q":[[0,"bitflags"]],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"c":[],"p":[]},\
"lock_api":{"doc":"This library provides type-safe and fully-featured <code>Mutex</code> …","t":"QQIQQDDSSSSQQDDDDDDIIIDIIIIIIIIIIDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKKKKLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKKKKLLLKKKKKKKLLLKKKLLLLLLLLLLLLLLLLLKLKLKLLLLLLLLLLLLLLLLLLLLLLKLKKKLLLLLLLLLLKKKKLLLLLLLLLLLKLLL","n":["Duration","Duration","GetThreadId","GuardMarker","GuardMarker","GuardNoSend","GuardSend","INIT","INIT","INIT","INIT","Instant","Instant","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","RawMutex","RawMutexFair","RawMutexTimed","RawReentrantMutex","RawRwLock","RawRwLockDowngrade","RawRwLockFair","RawRwLockRecursive","RawRwLockRecursiveTimed","RawRwLockTimed","RawRwLockUpgrade","RawRwLockUpgradeDowngrade","RawRwLockUpgradeFair","RawRwLockUpgradeTimed","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump","bump","bump","bump","bump","bump","bump","bump_exclusive","bump_exclusive","bump_shared","bump_shared","bump_upgradable","bump_upgradable","const_new","const_new","const_new","data_ptr","data_ptr","data_ptr","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradable","downgrade_to_upgradable","downgrade_upgradable","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_unlock","force_unlock","force_unlock_fair","force_unlock_fair","force_unlock_read","force_unlock_read_fair","force_unlock_write","force_unlock_write_fair","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked_exclusive","is_locked_exclusive","is_locked_exclusive","is_owned_by_current_thread","is_owned_by_current_thread","leak","lock","lock","lock","lock","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","map","map","map","map","map","map","map","map","mutex","new","new","new","nonzero_thread_id","raw","raw","raw","read","read_recursive","remutex","rwlock","rwlock","rwlock","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_for","try_lock_for","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_until","try_lock_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_read","try_read_for","try_read_recursive","try_read_recursive_for","try_read_recursive_until","try_read_until","try_upgradable_read","try_upgradable_read_for","try_upgradable_read_until","try_upgrade","try_upgrade","try_upgrade_for","try_upgrade_for","try_upgrade_until","try_upgrade_until","try_with_upgraded","try_with_upgraded_for","try_with_upgraded_until","try_write","try_write_for","try_write_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","unlocked","unlocked","unlocked","unlocked","unlocked","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","upgradable_read","upgrade","upgrade","with_upgraded","write"],"q":[[0,"lock_api"]],"d":["Duration type used for <code>try_lock_for</code>.","Duration type used for <code>try_lock_for</code>.","Helper trait which returns a non-zero thread ID.","Marker type which determines whether a lock guard should …","Marker type which determines whether a lock guard should …","Marker type which indicates that the Guard type for a lock …","Marker type which indicates that the Guard type for a lock …","Initial value for an unlocked mutex.","Initial value.","Initial value for an unlocked mutex.","Initial value for an unlocked <code>RwLock</code>.","Instant type used for <code>try_lock_until</code>.","Instant type used for <code>try_lock_until</code>.","An RAII mutex guard returned by <code>MutexGuard::map</code>, which can …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","Basic operations for a mutex.","Additional methods for mutexes which support fair …","Additional methods for mutexes which support locking with …","A raw mutex type that wraps another raw mutex to provide …","Basic operations for a reader-writer lock.","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support fair …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support locking with …","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","A mutex which can be recursively locked by a single thread.","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of a …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields an upgradable lock to a waiting thread …","Temporarily yields an upgradable lock to a waiting thread …","Creates a new mutex based on a pre-existing raw mutex.","Creates a new reentrant mutex based on a pre-existing raw …","Creates a new new instance of an <code>RwLock&lt;T&gt;</code> based on a …","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","","","","","","","","","","","","","","","","","Atomically downgrades an exclusive lock into a shared lock …","Atomically downgrades a write lock into a read lock …","Atomically downgrades an upgradable read lock lock into a …","Downgrades an exclusive lock to an upgradable lock.","Atomically downgrades a write lock into an upgradable read …","Downgrades an upgradable lock to a shared lock.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Forcibly unlocks the mutex.","Forcibly unlocks the mutex.","Forcibly unlocks the mutex using a fair unlock procotol.","Forcibly unlocks the mutex using a fair unlock protocol.","Forcibly unlocks a read lock.","Forcibly unlocks a read lock using a fair unlock procotol.","Forcibly unlocks a write lock.","Forcibly unlocks a write lock using a fair unlock procotol.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this mutex, returning the underlying data.","Consumes this mutex, returning the underlying data.","Consumes this <code>RwLock</code>, returning the underlying data.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks whether this <code>RwLock</code> is currently locked in any way.","Check if this <code>RwLock</code> is currently exclusively locked.","Check if this <code>RwLock</code> is currently exclusively locked.","Check if this <code>RwLock</code> is currently exclusively locked.","Checks whether the mutex is currently held by the current …","Checks whether the mutex is currently held by the current …","Leaks the mutex guard and returns a mutable reference to …","Acquires this mutex, blocking the current thread until it …","Acquires a mutex, blocking the current thread until it is …","Acquires this mutex, blocking if it’s held by another …","Acquires a reentrant mutex, blocking the current thread …","Acquires an exclusive lock, blocking the current thread …","Acquires a shared lock, blocking the current thread until …","Acquires a shared lock without deadlocking in case of a …","Acquires an upgradable lock, blocking the current thread …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Returns a reference to the original <code>Mutex</code> object.","Creates a new mutex in an unlocked state ready for use.","Creates a new reentrant mutex in an unlocked state ready …","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.","Returns a non-zero thread ID which identifies the current …","Returns the underlying raw mutex object.","Returns the underlying raw mutex object.","Returns the underlying raw reader-writer lock object.","Locks this <code>RwLock</code> with shared read access, blocking the …","Locks this <code>RwLock</code> with shared read access, blocking the …","Returns a reference to the original <code>ReentrantMutex</code> object.","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire an exclusive lock without blocking.","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire a shared lock without blocking.","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock without deadlocking in …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire an upgradable lock without blocking.","Attempts to acquire an upgradable lock until a timeout is …","Attempts to acquire an upgradable lock until a timeout is …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","First, tries to atomically upgrade an upgradable read lock …","Tries to atomically upgrade an upgradable read lock into …","Tries to atomically upgrade an upgradable read lock into …","Attempts to lock this <code>RwLock</code> with exclusive write access.","Attempts to acquire this <code>RwLock</code> with exclusive write …","Attempts to acquire this <code>RwLock</code> with exclusive write …","","","","","","","","","","","","","","","","Unlocks this mutex.","Unlocks this mutex. The inner mutex may not be unlocked if …","Releases an exclusive lock.","Releases an exclusive lock using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol. The inner …","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Releases a shared lock.","Releases a shared lock using a fair unlock protocol.","Releases an upgradable lock.","Releases an upgradable lock using a fair unlock protocol.","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Locks this <code>RwLock</code> with upgradable read access, blocking …","Upgrades an upgradable lock to an exclusive lock.","Atomically upgrades an upgradable read lock lock into an …","First, atomically upgrades an upgradable read lock lock …","Locks this <code>RwLock</code> with exclusive write access, blocking …"],"i":[36,37,0,15,16,0,0,15,2,3,16,36,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,42,12,3,13,14,5,18,6,19,8,9,11,21,22,41,42,12,3,13,14,5,18,6,19,8,9,11,21,22,1,1,3,5,6,8,9,11,7,7,7,7,10,10,12,13,14,12,13,14,12,13,14,5,18,6,19,8,9,11,21,22,5,18,9,22,23,9,11,24,9,24,5,18,6,19,8,9,11,21,22,12,13,14,5,5,18,18,6,6,19,19,8,8,9,9,11,11,21,21,22,22,12,13,12,13,14,14,14,14,41,42,12,12,12,3,13,13,13,14,14,14,5,18,6,19,8,9,11,21,22,12,13,14,41,42,12,3,13,14,5,18,6,19,8,9,11,21,22,12,13,14,15,15,12,3,13,16,16,14,16,16,14,3,13,5,15,12,3,13,16,16,33,20,5,18,6,19,8,9,21,22,5,12,13,14,2,12,13,14,14,14,6,8,9,11,41,42,12,3,13,14,5,18,6,19,8,9,11,21,22,41,42,12,3,13,14,5,18,6,19,8,9,11,21,22,15,12,3,13,16,37,37,36,12,3,13,16,37,33,38,38,37,36,12,3,13,20,39,39,5,18,6,19,8,9,21,22,14,14,14,14,14,14,14,14,14,20,11,39,11,39,11,11,11,11,14,14,14,41,42,12,3,13,14,5,18,6,19,8,9,11,21,22,15,3,16,7,1,3,5,18,6,19,8,9,11,21,22,16,7,20,10,5,6,8,9,11,5,6,8,9,11,14,20,11,11,14],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,2]]]],[[[5,[1,4]]]],[[[6,[1,2,4]]]],[[[8,[7,4]]]],[[[9,[7,4]]]],[[[11,[10,4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],13],[[],14],[[[12,[15,4]]]],[[[13,[15,2,4]]]],[[[14,[16,4]]]],[[],[[12,[15,[0,[4,17]]]]]],[[],[[13,[15,2,[0,[4,17]]]]]],[[],[[14,[16,[0,[4,17]]]]]],[[[5,[15,4]]],4],[[[18,[15,4]]],4],[[[6,[15,2,4]]],4],[[[19,[15,2,4]]],4],[[[8,[16,4]]],4],[[[9,[16,4]]],4],[[[11,[20,4]]],4],[[[21,[16,4]]],4],[[[22,[16,4]]],4],[[[5,[15,4]]],4],[[[18,[15,4]]],4],[[[9,[16,4]]],4],[[[22,[16,4]]],4],[[]],[[[9,[23,4]]],[[8,[23,4]]]],[[[11,[24,4]]],[[8,[24,4]]]],[[]],[[[9,[24,4]]],[[11,[24,4]]]],[[]],[[[5,[15,4]]]],[[[18,[15,4]]]],[[[6,[15,2,4]]]],[[[19,[15,2,4]]]],[[[8,[16,4]]]],[[[9,[16,4]]]],[[[11,[20,4]]]],[[[21,[16,4]]]],[[[22,[16,4]]]],[[[12,[15,[0,[4,25]]]],26],27],[[[13,[15,2,[0,[4,25]]]],26],27],[[[14,[16,[0,[4,25]]]],26],27],[[[5,[15,[0,[25,4]]]],26],27],[[[5,[15,[0,[28,4]]]],26],27],[[[18,[15,[0,[25,4]]]],26],27],[[[18,[15,[0,[28,4]]]],26],27],[[[6,[15,2,[0,[28,4]]]],26],27],[[[6,[15,2,[0,[25,4]]]],26],27],[[[19,[15,2,[0,[25,4]]]],26],27],[[[19,[15,2,[0,[28,4]]]],26],27],[[[8,[16,[0,[28,4]]]],26],27],[[[8,[16,[0,[25,4]]]],26],27],[[[9,[16,[0,[28,4]]]],26],27],[[[9,[16,[0,[25,4]]]],26],27],[[[11,[20,[0,[28,4]]]],26],27],[[[11,[20,[0,[25,4]]]],26],27],[[[21,[16,[0,[28,4]]]],26],27],[[[21,[16,[0,[25,4]]]],26],27],[[[22,[16,[0,[25,4]]]],26],27],[[[22,[16,[0,[28,4]]]],26],27],[[[12,[15,4]]]],[[[13,[15,2,4]]]],[[[12,[1,4]]]],[[[13,[1,2,4]]]],[[[14,[16,4]]]],[[[14,[7,4]]]],[[[14,[16,4]]]],[[[14,[7,4]]]],[[]],[[]],[[]],[[],[[12,[15]]]],[29],[[]],[29],[[],[[13,[15,2]]]],[[]],[[]],[29],[[],[[14,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[12,[15,4]]],4],[[[13,[15,2,4]]],4],[[[14,[16,4]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[12,[15]]]],[[[13,[15,2]]]],[[[14,[16]]]],[[],30],[[],30],[[[12,[15,4]]],30],[[[3,[15,2]]],30],[[[13,[15,2,4]]],30],[[],30],[[],30],[[[14,[16,4]]],30],[[],30],[[],30],[[[14,[16,4]]],30],[[[3,[15,2]]],30],[[[13,[15,2,4]]],30],[[[5,[15,4]]],4],[[]],[[[12,[15,4]]],[[5,[15,4]]]],[[[3,[15,2]]]],[[[13,[15,2,4]]],[[6,[15,2,4]]]],[[]],[[]],[[]],[[]],[[[5,[15,4]],31],[[18,[15,4]]]],[[[18,[15,4]],31],[[18,[15,4]]]],[[[6,[15,2,4]],31],[[19,[15,2,4]]]],[[[19,[15,2,4]],31],[[19,[15,2,4]]]],[[[8,[16,4]],31],[[21,[16,4]]]],[[[9,[16,4]],31],[[22,[16,4]]]],[[[21,[16,4]],31],[[21,[16,4]]]],[[[22,[16,4]],31],[[22,[16,4]]]],[[[5,[15,4]]],[[12,[15,4]]]],[[],[[12,[15]]]],[[],[[13,[15,2]]]],[[],[[14,[16]]]],[[],32],[[[12,[15,4]]],15],[[[13,[15,2,4]]],15],[[[14,[16,4]]],16],[[[14,[16,4]]],[[8,[16,4]]]],[[[14,[33,4]]],[[8,[33,4]]]],[[[6,[15,2,4]]],[[13,[15,2,4]]]],[[[8,[16,4]]],[[14,[16,4]]]],[[[9,[16,4]]],[[14,[16,4]]]],[[[11,[20,4]]],[[14,[20,4]]]],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],30],[[[12,[15,4]]],[[35,[[5,[15,4]]]]]],[[[3,[15,2]]],30],[[[13,[15,2,4]]],[[35,[[6,[15,2,4]]]]]],[[],30],[[],30],[[],30],[[],30],[[[12,[36,4]]],[[35,[[5,[36,4]]]]]],[[[3,[36,2]]],30],[[[13,[36,2,4]]],[[35,[[6,[36,2,4]]]]]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[[12,[36,4]]],[[35,[[5,[36,4]]]]]],[[[3,[36,2]]],30],[[[13,[36,2,4]]],[[35,[[6,[36,2,4]]]]]],[[],30],[[],30],[[],30],[[[5,[15,4]],31],[[34,[[18,[15,4]],[5,[15,4]]]]]],[[[18,[15,4]],31],[[34,[[18,[15,4]],[18,[15,4]]]]]],[[[6,[15,2,4]],31],[[34,[[19,[15,2,4]],[6,[15,2,4]]]]]],[[[19,[15,2,4]],31],[[34,[[19,[15,2,4]],[19,[15,2,4]]]]]],[[[8,[16,4]],31],[[34,[[21,[16,4]],[8,[16,4]]]]]],[[[9,[16,4]],31],[[34,[[22,[16,4]],[9,[16,4]]]]]],[[[21,[16,4]],31],[[34,[[21,[16,4]],[21,[16,4]]]]]],[[[22,[16,4]],31],[[34,[[22,[16,4]],[22,[16,4]]]]]],[[[14,[16,4]]],[[35,[[8,[16,4]]]]]],[[[14,[37,4]]],[[35,[[8,[37,4]]]]]],[[[14,[33,4]]],[[35,[[8,[33,4]]]]]],[[[14,[38,4]]],[[35,[[8,[38,4]]]]]],[[[14,[38,4]]],[[35,[[8,[38,4]]]]]],[[[14,[37,4]]],[[35,[[8,[37,4]]]]]],[[[14,[20,4]]],[[35,[[11,[20,4]]]]]],[[[14,[39,4]]],[[35,[[11,[39,4]]]]]],[[[14,[39,4]]],[[35,[[11,[39,4]]]]]],[[],30],[[[11,[20,4]]],[[34,[[9,[20,4]],[11,[20,4]]]]]],[[],30],[[[11,[39,4]]],[[34,[[9,[39,4]],[11,[39,4]]]]]],[[],30],[[[11,[39,4]]],[[34,[[9,[39,4]],[11,[39,4]]]]]],[[[11,[24,4]],31],35],[[[11,[[0,[39,24]],4]],31],35],[[[11,[[0,[39,24]],4]],31],35],[[[14,[16,4]]],[[35,[[9,[16,4]]]]]],[[[14,[37,4]]],[[35,[[9,[37,4]]]]]],[[[14,[37,4]]],[[35,[[9,[37,4]]]]]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[]],[[[3,[15,2]]]],[[]],[[]],[[]],[[[3,[1,2]]]],[[[5,[1,4]]]],[[[18,[1,4]]]],[[[6,[1,2,4]]]],[[[19,[1,2,4]]]],[[[8,[7,4]]]],[[[9,[7,4]]]],[[[11,[10,4]]]],[[[21,[7,4]]]],[[[22,[7,4]]]],[[]],[[]],[[]],[[]],[[[5,[15,4]],31]],[[[6,[15,2,4]],31]],[[[8,[16,4]],31]],[[[9,[16,4]],31]],[[[11,[20,4]],31]],[[[5,[1,4]],31]],[[[6,[1,2,4]],31]],[[[8,[7,4]],31]],[[[9,[7,4]],31]],[[[11,[10,4]],31]],[[[14,[20,4]]],[[11,[20,4]]]],[[]],[[[11,[20,4]]],[[9,[20,4]]]],[[[11,[24,4]],31]],[[[14,[16,4]]],[[9,[16,4]]]]],"c":[],"p":[[8,"RawMutexFair"],[8,"GetThreadId"],[3,"RawReentrantMutex"],[8,"Sized"],[3,"MutexGuard"],[3,"ReentrantMutexGuard"],[8,"RawRwLockFair"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[8,"RawRwLockUpgradeFair"],[3,"RwLockUpgradableReadGuard"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"RwLock"],[8,"RawMutex"],[8,"RawRwLock"],[8,"Default"],[3,"MappedMutexGuard"],[3,"MappedReentrantMutexGuard"],[8,"RawRwLockUpgrade"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawRwLockDowngrade"],[8,"RawRwLockUpgradeDowngrade"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Display"],[15,"never"],[15,"bool"],[8,"FnOnce"],[3,"NonZeroUsize"],[8,"RawRwLockRecursive"],[4,"Result"],[4,"Option"],[8,"RawMutexTimed"],[8,"RawRwLockTimed"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgradeTimed"],[3,"TypeId"],[3,"GuardSend"],[3,"GuardNoSend"]]},\
"log":{"doc":"A lightweight logging facade.","t":"NNNNNNEEIDDNDDDRDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLKLLLLLLLOLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLKOOFLLFLLLLLLLLLLLLLLFFFFLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLO","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","line","line","log","log","log_enabled","logger","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","set_max_level_racy","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","A thread-unsafe version of <code>set_max_level</code>.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,3,7,1,8,4,6,1,8,4,6,8,7,0,3,7,20,4,4,6,6,8,7,11,0,1,3,1,3,20,4,4,6,6,1,3,8,7,15,15,11,11,4,6,1,3,8,7,15,11,4,6,4,6,8,7,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,1,3,20,0,0,0,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[[],3],[[],7],[8,10],[[4,4],10],[[4,6],10],[[6,6],10],[[6,4],10],[[8,8],10],[[7,7],10],[[11,11],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[]],[[4,13],14],[[4,13],14],[[6,13],14],[[6,13],14],[[1,13],14],[[3,13],14],[[8,13],14],[[7,13],14],[[15,13],14],[[15,13],14],[[11,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[16,[4]]]],[5,[[16,[6]]]],[[4,17]],[[6,17]],[[8,17]],[[7,17]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[19]]]],[[3,[12,[19]]],3],[1],0,0,[[],20],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[],3],[[],7],[[4,6],[[12,[9]]]],[[4,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[6,4],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[20,[[16,[15]]]],[20,[[16,[15]]]],[6],[6],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0],"c":[],"p":[[3,"Record"],[3,"Arguments"],[3,"RecordBuilder"],[4,"Level"],[15,"str"],[4,"LevelFilter"],[3,"MetadataBuilder"],[3,"Metadata"],[4,"Ordering"],[15,"bool"],[3,"ParseLevelError"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"SetLoggerError"],[4,"Result"],[8,"Hasher"],[8,"Iterator"],[15,"u32"],[8,"Log"],[3,"TypeId"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out of …","t":"EDILLLLOLLLLLLLFLLLKLLLLLLLL","n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":[[0,"scopeguard"]],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected value.","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred closure …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through deref) …"],"i":[0,0,0,3,7,3,7,0,3,3,3,3,7,3,7,0,3,7,3,2,7,3,7,3,7,3,7,3],"f":[0,0,0,[[]],[[]],[[]],[[]],0,[[[3,[1,2]]]],[[[3,[1,2]]]],[[[3,[1,2]]]],[[[3,[4,1,2]],5],6],[[7,5],6],[[]],[[]],[1,[[3,[1,7]]]],[[]],[[]],[[[3,[1,2]]]],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[1,[[3,[1,2]]]]],"c":[],"p":[[8,"FnOnce"],[8,"Strategy"],[3,"ScopeGuard"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Always"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"spin":{"doc":"This crate provides spin-based versions of the primitives …","t":"GGGCGCGCGGCAAAAAAADDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLGGGGGGDDCCLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLLLLLLLLLDIDLLLLLLLLKLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Barrier","Lazy","Mutex","MutexGuard","Once","RelaxStrategy","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","Spin","barrier","lazy","lock_api","mutex","once","relax","rwlock","Barrier","BarrierWaitResult","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_leader","new","try_from","try_from","try_into","try_into","type_id","type_id","wait","Lazy","as_mut_ptr","borrow","borrow_mut","default","deref","fmt","force","from","into","new","try_from","try_into","type_id","Mutex","MutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","Mutex","MutexGuard","SpinMutex","SpinMutexGuard","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","spin","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","SpinMutex","SpinMutexGuard","as_mut_ptr","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","INIT","Once","as_mut_ptr","borrow","borrow_mut","call_once","default","drop","fmt","from","from","from","get","get_mut","get_mut_unchecked","get_unchecked","initialized","into","into_inner_unchecked","is_completed","new","poll","try_call_once","try_from","try_into","try_into_inner","type_id","wait","Loop","RelaxStrategy","Spin","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","relax","relax","relax","try_from","try_from","try_into","try_into","type_id","type_id","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","as_mut_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradeable","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_read_decrement","force_write_unlock","from","from","from","from","from","from","get_mut","into","into","into","into","into_inner","is_locked","leak","leak","leak","lock_exclusive","lock_shared","lock_upgradable","new","read","reader_count","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_lock_exclusive","try_lock_shared","try_lock_upgradable","try_read","try_upgrade","try_upgrade","try_upgradeable_read","try_write","type_id","type_id","type_id","type_id","unlock_exclusive","unlock_shared","unlock_upgradable","upgrade","upgrade","upgradeable_read","write","writer_count"],"q":[[0,"spin"],[18,"spin::barrier"],[37,"spin::lazy"],[51,"spin::lock_api"],[57,"spin::mutex"],[96,"spin::mutex::spin"],[134,"spin::once"],[162,"spin::relax"],[182,"spin::rwlock"]],"d":["A primitive that synchronizes the execution of multiple …","A value which is initialized on the first access. See …","A primitive that synchronizes the execution of multiple …","","A primitive that provides lazy one-time initialization. …","","A lock that provides data access to either one writer or …","","A guard that provides immutable data access but can be …","A guard that provides mutable data access. See …","","Synchronization primitive allowing multiple threads to …","Synchronization primitives for lazy evaluation.","Spin synchronisation primitives, but compatible with …","Locks that have the same behaviour as a mutex.","Synchronization primitives for one-time evaluation.","Strategies that determine the behaviour of locks when …","A lock that provides data access to either one writer or …","A primitive that synchronizes the execution of multiple …","A <code>BarrierWaitResult</code> is returned by <code>wait</code> when all threads …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether this thread from <code>wait</code> is the “leader …","Creates a new barrier that can block a given number of …","","","","","","","Blocks the current thread until all threads have …","A value which is initialized on the first access.","Retrieves a mutable pointer to the inner data.","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new lazy value with the given initializing …","","","","A lock that provides mutually exclusive data access …","A guard that provides mutable data access (compatible with …","A lock that provides data access to either one writer or …","A guard that provides immutable data access (compatible …","A guard that provides immutable data access but can be …","A guard that provides mutable data access (compatible with …","A spin-based lock providing mutually exclusive access to …","A generic guard that will protect some data access and …","","","","","","","","","","","","","Force unlock this <code>Mutex</code>.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Mutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","","Leak the lock guard, yielding a mutable reference to the …","Locks the <code>Mutex</code> and returns a guard that permits access to …","","Creates a new <code>Mutex</code> wrapping the supplied data.","A naïve spinning mutex.","","","","","","Try to lock this <code>Mutex</code>, returning a lock guard if …","","","","A spin lock providing mutually exclusive access to data.","A guard that provides mutable data access.","Returns a mutable pointer to the underlying data.","","","","","","","","The dropping of the MutexGuard will release the lock it …","","","","Force unlock this <code>SpinMutex</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>SpinMutex</code> and unwraps the underlying data.","","Returns <code>true</code> if the lock is currently held.","Leak the lock guard, yielding a mutable reference to the …","Locks the <code>SpinMutex</code> and returns a guard that permits …","","Creates a new <code>SpinMutex</code> wrapping the supplied data.","","","","","","Try to lock this <code>SpinMutex</code>, returning a lock guard if …","","","","Initialization constant of <code>Once</code>.","A primitive that provides lazy one-time initialization.","Retrieve a pointer to the inner data.","","","Performs an initialization routine once and only once. The …","","","","","Returns the argument unchanged.","","Returns a reference to the inner value if the <code>Once</code> has …","Returns a mutable reference to the inner value if the <code>Once</code> …","Returns a mutable reference to the inner value","Returns a reference to the inner value on the unchecked …","Creates a new initialized <code>Once</code>.","Calls <code>U::from(self)</code>.","Returns a the inner value if the <code>Once</code> has been initialized.","Checks whether the value has been initialized.","Creates a new <code>Once</code>.","Like <code>Once::get</code>, but will spin if the <code>Once</code> is in the …","This method is similar to <code>call_once</code>, but allows the given …","","","Returns a the inner value if the <code>Once</code> has been initialized.","","Spins until the <code>Once</code> contains a value.","A strategy that rapidly spins, without telling the CPU to …","A trait implemented by spinning relax strategies.","A strategy that rapidly spins while informing the CPU that …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform the relaxing operation during a period of …","","","","","","","","","A lock that provides data access to either one writer or …","A guard that provides immutable data access.","A guard that provides immutable data access but can be …","A guard that provides mutable data access.","Returns a mutable pointer to the underying data.","","","","","","","","","","","","","","","Downgrades the writable lock guard to a readable, shared …","Downgrades the upgradeable lock guard to a readable, …","Downgrades the writable lock guard to an upgradable, …","","","","","","","","","","","Force decrement the reader count.","Force unlock exclusive write access.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>RwLock</code>, returning the underlying data.","","Leak the lock guard, yielding a reference to the …","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a reference to the …","","","","Creates a new spinlock wrapping the supplied data.","Locks this rwlock with shared read access, blocking the …","Return the number of readers that currently hold the lock …","","","","","","","","","","","","Attempt to acquire this lock with shared read access.","","Tries to upgrade an upgradeable lock guard to a writable …","Tries to obtain an upgradeable lock guard.","Attempt to lock this rwlock with exclusive write access.","","","","","","","","","Upgrades an upgradeable lock guard to a writable lock …","Obtain a readable lock guard that can later be upgraded to …","Lock this rwlock with exclusive write access, blocking the …","Return the number of writers that currently hold the lock."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,4,1,4,1,4,1,1,4,4,1,4,1,4,1,4,0,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,15,16,15,16,15,16,16,15,16,16,15,15,15,15,16,15,15,16,15,15,15,16,15,15,15,0,15,16,15,16,15,15,15,16,15,0,0,20,20,21,20,21,20,21,21,21,20,21,21,20,20,20,20,21,20,20,21,20,20,20,21,20,20,20,20,21,20,21,20,20,20,21,20,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,27,28,27,28,27,28,27,28,7,27,28,27,28,27,28,27,28,0,0,0,0,23,23,24,25,26,23,24,25,26,23,24,25,26,25,23,25,26,25,24,25,26,23,24,24,25,25,26,26,23,23,23,23,23,24,25,26,23,23,24,25,26,23,23,24,25,26,23,23,23,23,23,23,23,24,25,26,23,24,25,26,23,23,23,23,23,26,23,23,23,24,25,26,23,23,23,23,26,23,23,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[3,4],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[[4,[7]]],1],0,[8],[[]],[[]],[[],[[8,[9]]]],[[[8,[10,7]]]],[[[8,[11]],12],13],[[[8,[10,7]]]],[[]],[[]],[[],8],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],[[15,[[0,[14,9]]]]]],[[[16,[14]]],14],[[[16,[14]]],14],[[[15,[[0,[14,11]]]],12],13],[[[16,[[0,[14,17]]]],12],13],[[[16,[[0,[14,11]]]],12],13],[[[15,[14]]]],[18],[[],15],[[]],[[]],[[[15,[14]]],14],[[]],[[]],[15],[[[15,[14]]],2],[[[15,[7]]],2],[[[16,[14]]],14],[[[15,[14,7]]],[[16,[14]]]],[[[15,[7]]]],[[],15],0,[[],5],[[],5],[[],5],[[],5],[[[15,[7]]],2],[[[15,[14]]],[[19,[[16,[14]]]]]],[[],6],[[],6],[[[15,[7]]]],0,0,[20],[[]],[[]],[[]],[[]],[[],[[20,[[0,[14,9]]]]]],[[[21,[14]]],14],[[[21,[14]]],14],[[[21,[14]]]],[[[20,[[0,[14,11]]]],12],13],[[[21,[[0,[14,11]]]],12],13],[[[21,[[0,[14,17]]]],12],13],[[[20,[14]]]],[18],[[]],[[],20],[[]],[[[20,[14]]],14],[[]],[[]],[20],[[[20,[7]]],2],[[[20,[14]]],2],[[[21,[14]]],14],[[[20,[14,7]]],[[21,[14]]]],[[[20,[7]]]],[[],20],[[],5],[[],5],[[],5],[[],5],[[[20,[7]]],2],[[[20,[14]]],[[19,[[21,[14]]]]]],[[],6],[[],6],[[[20,[7]]]],0,0,[22],[[]],[[]],[[[22,[7]],10]],[[],22],[22],[[[22,[11]],12],13],[[],22],[[]],[18],[22,19],[22,19],[22],[22],[[],22],[[]],[22],[22,2],[[],22],[[[22,[7]]],19],[[[22,[7]],10],5],[[],5],[[],5],[22,19],[[],6],[[[22,[7]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],0,0,0,0,[23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[23,[[0,[14,9]]]]]],[[[24,[14]]],14],[[[25,[14]]],14],[[[26,[14]]],14],[[[25,[14]]],14],[[[23,[7]]]],[[[25,[14]]],[[24,[14]]]],[[[26,[14]]],[[24,[14]]]],[[[25,[14]]],[[26,[14]]]],[[[24,[14]]]],[[[25,[14]]]],[[[26,[14]]]],[[[23,[[0,[14,11]]]],12],13],[[[24,[[0,[14,17]]]],12],13],[[[24,[[0,[14,11]]]],12],13],[[[25,[[0,[14,17]]]],12],13],[[[25,[[0,[14,11]]]],12],13],[[[26,[[0,[14,11]]]],12],13],[[[26,[[0,[14,17]]]],12],13],[[[23,[14]]]],[[[23,[14]]]],[18],[[],23],[[]],[[]],[[]],[[]],[[[23,[14]]],14],[[]],[[]],[[]],[[]],[23],[[[23,[7]]],2],[[[24,[14]]],14],[[[25,[14]]],14],[[[26,[14]]],14],[[[23,[7]]]],[[[23,[7]]]],[[[23,[7]]]],[[],23],[[[23,[14,7]]],[[24,[14]]]],[[[23,[14]]],3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[23,[7]]],2],[[[23,[7]]],2],[[[23,[7]]],2],[[[23,[14]]],[[19,[[24,[14]]]]]],[[[23,[7]]],2],[[[26,[14]]],[[5,[[25,[14]],[26,[14]]]]]],[[[23,[14]]],[[19,[[26,[14]]]]]],[[[23,[14]]],[[19,[[25,[14]]]]]],[[],6],[[],6],[[],6],[[],6],[[[23,[7]]]],[[[23,[7]]]],[[[23,[7]]]],[[[23,[7]]]],[[[26,[14,7]]],[[25,[14,7]]]],[[[23,[14,7]]],[[26,[14,7]]]],[[[23,[14,7]]],[[25,[14,7]]]],[[[23,[14]]],3]],"c":[],"p":[[3,"BarrierWaitResult"],[15,"bool"],[15,"usize"],[3,"Barrier"],[4,"Result"],[3,"TypeId"],[8,"RelaxStrategy"],[3,"Lazy"],[8,"Default"],[8,"FnOnce"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Sized"],[3,"Mutex"],[3,"MutexGuard"],[8,"Display"],[15,"never"],[4,"Option"],[3,"SpinMutex"],[3,"SpinMutexGuard"],[3,"Once"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableGuard"],[3,"Spin"],[3,"Loop"]]},\
"vmem":{"doc":"","t":"ENENDNNNGIDFLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLAENENDNNNGIDLLLLFLLLLLLLLLLLKLLLLLKLL","n":["AllocStrategy","BestFit","Error","InstantFit","Layout","NextFit","OutOfMemory","OutOfTags","Result","Source","Vmem","bootstrap","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","drop","eq","fmt","fmt","fmt","from","from","from","from","import","import","into","into","into","into","release","release","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vmem","AllocStrategy","BestFit","Error","InstantFit","Layout","NextFit","OutOfMemory","OutOfTags","Result","Source","Vmem","add","align","alloc","alloc_constrained","bootstrap","capacity","capacity_free","capacity_used","free","free_constrained","get_align","get_maxaddr","get_minaddr","get_nocross","get_phase","get_size","import","name","new","new","nocross","phase","release","with_span","within"],"q":[[0,"vmem"],[57,"vmem::vmem"]],"d":["Allocation Strategy","Best Fit","","Instant Fit","Layout of a constrained allocation","Next Fit","","","","Types from which a <code>Vmem</code> arena can import spans.","Vmem Arena","Bootstrap the vmem system","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Import a span from this source.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Release a segment back to its source","","","","","","","","","","","","","","","","Vmem Resource Allocator","Allocation Strategy","Best Fit","","Instant Fit","Layout of a constrained allocation","Next Fit","","","","Types from which a <code>Vmem</code> arena can import spans.","Vmem Arena","Add a span to this arena","Request an allocation aligned to a specific boundary","Allocate <code>size</code> bytes from this arena.","Allocate a segment which respects the constraints of <code>layout</code>…","Bootstrap the vmem system","Returns the total number of bytes managed by the arena","Returns the total number of bytes in the arena available …","Returns the total number of bytes currently allocated from …","Free a segment allocated by <code>alloc()</code>","Free a segment allocated by <code>alloc_constrained()</code>","","","","","","","Import a span from this source.","Returns the name of this arena.","Create a new arena","Create a new layout describing a region of <code>size</code> bytes.","Specify a specific boundary which the allocation must not …","Specify a specific offset from the layout’s alignment","Release a segment back to its source","Create a new arena with an initial span","Specify a range which the allocation must be made within"],"i":[0,2,0,2,0,2,5,5,0,0,0,0,3,5,1,2,3,5,1,2,1,2,1,2,2,3,2,5,1,2,3,5,1,2,14,3,3,5,1,2,14,3,1,2,3,5,1,2,3,5,1,2,3,5,1,2,0,0,2,0,2,0,2,5,5,0,0,0,3,1,3,3,0,3,3,3,3,3,1,1,1,1,1,1,14,3,3,1,1,1,14,3,1],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[],2],[3],[[2,2],4],[[5,6],7],[[1,6],7],[[2,6],7],[[]],[[]],[[]],[[]],[8,[[9,[8]]]],[[3,8],[[9,[8]]]],[[]],[[]],[[]],[[]],[[8,8]],[[3,8,8]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,[[3,8,8],9],[[1,8],1],[[3,8,2],[[9,[8]]]],[[3,1,2],[[9,[8]]]],[[]],[3,8],[3,8],[3,8],[[3,8,8]],[[3,8,8]],[1,8],[1,8],[1,8],[1,8],[1,8],[1,8],[8,[[9,[8]]]],[3,12],[[[13,[12]],8,[15,[14]]],3],[8,1],[[1,8],1],[[1,8],1],[[8,8]],[[[13,[12]],8,[15,[14]],8,8],[[9,[3]]]],[[1,[16,[8]]],1]],"c":[],"p":[[3,"Layout"],[4,"AllocStrategy"],[3,"Vmem"],[15,"bool"],[4,"Error"],[3,"Formatter"],[6,"Result"],[15,"usize"],[6,"Result"],[4,"Result"],[3,"TypeId"],[15,"str"],[4,"Cow"],[8,"Source"],[4,"Option"],[3,"RangeInclusive"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
